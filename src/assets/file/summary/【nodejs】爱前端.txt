
--------------------------------------------------------------------------------
【爱前端高级课程】02_模块-内置模块

	nodejs内部有很多内置模块
	
	const http = require('http');// 变量名与模块一样。 

--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】03_模块-自定义模块

	require('./test.js);
		require后，立即执行，
		如果有异步，那么会像是在同一个文件一样的调用顺序。
		如过有循环， 如：a引b，b又引a，node不会无限循环。
		路径名称一定要有 './' ，否则是 "node_modules" 文件夹内的 内置模块。

--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】04_模块-使用exports的语法暴露

	let a = '123';
	exports.a = a;
	
	function sum () {}
	exports.sum = sum;
	
		规范：
			暴露名称，与内部名称一样
			引用文件的变量名，与被引用文件名一样； const http = require('http');
			
--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】05_模块-使用module.exports暴露
	
	当一个文件，只暴露一个变量，一般是个类
	
	// 例1
	// Person.js
	function Person () {};// 类
	exports.Person = Person；// ❤
	
	// test.js
	const People = require('./People.js');
	let p = new People.People();// ❤
	
	// 例2
	// Person.js
	function Person () {};// 类
	module.exports = Person；// ❤
	
	// test.js
	const People = require('./People.js');
	let p = new People();// ❤
	
	注意：	module.exports暴露的，应该用大写开头
			exports暴露的，应该用小写开头	

--------------------------------------------------------------------------------
【爱前端高级课程】06_神奇的node_modules文件夹

	require('test.js');
		没有写 './' ，则默认是找 node_modules文件夹内的模块
			node_modules 	只要在调用文件的父级，就行，不能父级的同级文件夹内。
							只要找到第一个node_modules文件夹，就去寻找文件夹
		也就是说，当需要用模块的时候，不需要些 './'
		

	系统环境路径：
	c:\user\cyber\AppData\Roaming\npm\node_modules
		全局路径
		
	require('test');
		表示： 寻找node_modules文件夹下的 test文件夹下的 main.js
		当省略文件名的时候，会自动识别index.js
		
--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】07_npm的使用
	
	全世界每个开发者的包， 组成了npm
	
	npm install solarlunar
		需要的工具，以后不要自己写，而是去npm 找
		
--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】08_使用package.json管理依赖

	当保存代码，或者发送给她人时，不需要发送包文件。
	此时需要有依赖文件package.json的dependencies字段，从而以后可以直接 npm install 安装依赖包。
	
	package.json
		可以自己创建。
		可以npm init, 也需要自己补充。
		
	版本控制：
		npm 官网查看
		
	npm install NAME --save
		下载并写入package的dependencies
	
	补：下载的包内部也有一个package.json文件夹
	
	npm install NAME#^1.0.0 
		限制下载版本
		
	npm install NAME -g
		全局安装
		
	npm uninstall express
		删除
		
	$ npm update express
		更新模块
		
	$ npm search express
		搜索模块
		
	$ npm publish
		发布模块
	
	
--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】09_全局安装和淘宝镜像

	npm install NAME -g
		全局安装
	
	什么东西才能安装到全局？
		cli： gulp， grunt， 
		
	淘宝镜像
		cnpm
		
--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】10_NodeJS中GET请求和POST请求的识别
	
	cnpm install serve-static --save
	cnpm install finalhandler --save	
		安装一个服务器环境
		
	http, url, fs
	
	
--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】11_formidable模块的使用

	没看

--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】12_Express.js框架

	没看

--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】13_Express.js中使用模板引擎

	没看

--------------------------------------------------------------------------------
【爱前端高级课程NodeJS】14_MVC项目的演示开发

	没看












