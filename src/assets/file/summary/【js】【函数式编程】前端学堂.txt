地址：网易云课堂 -> 《前端JavaScript函数式编程》
总课时：18课


+--------------------------------------------------------------------------------------------------------------------------
|第1课
+--------------------------------------------------------------------------------------------------------------------------
【编程发展历史】
	机器编程（machine）
	汇编（assembly）
	面向过程（procedural）
	面向对象（object oriented）
	函数式编程（functional）
	
【课程提纲】
	命令式编程和声明式变成
	First Class Functions （头等函数）
	Pure Functions （纯函数）
	Curry （科里化）
	Functor （函数因子） & Monad & IO
	OOP VS FP & 应用案例学些分析
	
【命令式编程与声明式编程】
// 命令式：关注怎么做
const triple = (arr) => {
	let result = [];
	for (let i = 0; i < arr.length; i++) {
		result.push(arr[i] * 3);
	}
	return result;
}

// 声明式：关注做什么！
const triple = (arr) => {
	arr.map((item) => {
		return item * 3;
	})
}


+--------------------------------------------------------------------------------------------------------------------------
|第2课
+--------------------------------------------------------------------------------------------------------------------------
【头等函数】
	函数可以当做同其他变量一样的【传递参数】，或被其他【函数返回】。 
		构成数组
		构成hash
		作为形参
		
【高级函数】
	有一个函数作为参数，或者返回一个函数。称为高阶函数。
	
	
+--------------------------------------------------------------------------------------------------------------------------
|第3课
+--------------------------------------------------------------------------------------------------------------------------
【纯函数】
	副作用：外界变化
	输出依赖输入
	幂等性：执行一次和执行n次的结果是一样的。
	
//
let type = 'test';
const log = function (content) {
	console.log(content, type);
};
// 调用
log(1);// 1,test
type = 'hello';
log(1);// 1,hello

// 同样调用log(1); 结果却不一样，所以不是纯函数

【纯函数优点】
	可读性好
	并行运行
	引用透明
	代码可测
	易于模块化，易于复用
	
【代码可测】
	mocha + chai
	

+--------------------------------------------------------------------------------------------------------------------------
|第4课
+--------------------------------------------------------------------------------------------------------------------------
npm install mocha chai --save-dev
npm install babel-core babel-preset-es2015 --save-dev

【学习mocha】


+--------------------------------------------------------------------------------------------------------------------------
|第5课
+--------------------------------------------------------------------------------------------------------------------------
【柯里化】
	将多个参数的函数，转化成按照参数顺序来执行的函数，每个函数只有一个形参。
	mix(a, b, c) => mix(a)(b)(c);


+--------------------------------------------------------------------------------------------------------------------------
|第6课
+--------------------------------------------------------------------------------------------------------------------------
【为什么要柯里化】
	构建更简单，可重用组件
	复杂逻辑切分成细节，易于发现问题
	使得函数可以直接通过map等方法被数据调用

【lodash， ramda】

+--------------------------------------------------------------------------------------------------------------------------
|第7课
+--------------------------------------------------------------------------------------------------------------------------
import _ from 'lodash'

const add = _.curry( (a, b, c) => (a + b+ c))

add(1)(2)(3);// 6
add(1, 2)(3);// 6
add(1)(2, 3);// 6


+--------------------------------------------------------------------------------------------------------------------------
|第8课
+--------------------------------------------------------------------------------------------------------------------------
【函自functor】实现和原理



+--------------------------------------------------------------------------------------------------------------------------
|第9课
+--------------------------------------------------------------------------------------------------------------------------
【通过柯里化实现immutable（不可变）函子】


+--------------------------------------------------------------------------------------------------------------------------
|第10课
+--------------------------------------------------------------------------------------------------------------------------
【编码实现业务函子】


+--------------------------------------------------------------------------------------------------------------------------
|第11课
+--------------------------------------------------------------------------------------------------------------------------
【函数式函子概念和编码实现】


+--------------------------------------------------------------------------------------------------------------------------
|第12课
+--------------------------------------------------------------------------------------------------------------------------
【monad函子与 。。。】


+--------------------------------------------------------------------------------------------------------------------------
|第13课
+--------------------------------------------------------------------------------------------------------------------------
【functor函子IO】


+--------------------------------------------------------------------------------------------------------------------------
|第14课
+--------------------------------------------------------------------------------------------------------------------------
【javascript编码实现monad MayBe】


+--------------------------------------------------------------------------------------------------------------------------
|第15课
+--------------------------------------------------------------------------------------------------------------------------
【javascript编码实现monad Either 和IO函子】


+--------------------------------------------------------------------------------------------------------------------------
|第16课
+--------------------------------------------------------------------------------------------------------------------------
【OOP 和 FP 优缺点】
OOP
	抽象
	封装
	继承
	多态
	组合

FP
	易组合，结构整洁
	高阶函数
	纯函数，无副作用
	惰性求值
	易于并行化
	immutable不可变性

【业务开发优化】
	抽离纯函数
	柯里化
	

+--------------------------------------------------------------------------------------------------------------------------
|第17课
+--------------------------------------------------------------------------------------------------------------------------



+--------------------------------------------------------------------------------------------------------------------------
|第18课
+--------------------------------------------------------------------------------------------------------------------------













