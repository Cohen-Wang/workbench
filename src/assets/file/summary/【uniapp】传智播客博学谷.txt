地址：https://study.163.com/course/courseLearn.htm?courseId=1209915801#/learn/video?lessonId=1280681003&courseId=1209915801


+--------------------------------------------------------------------------------------------------------------------------
|第1课：
+--------------------------------------------------------------------------------------------------------------------------
【介绍】
uniapp是使用vue.js开发所有前端应用的框架，编写一套代码，可以发布到ios，android，h5，各种小程序上。

【学习需求】
vue.js
小程序开发经验


+--------------------------------------------------------------------------------------------------------------------------
|第2课：
+--------------------------------------------------------------------------------------------------------------------------
【环境搭建】
Hbuilder
微信小程序开发

【创建项目】
hbuilder - 文件 - 新建 - 项目 - uniapp

【运行】
hbuilder - 运行 - 运行到浏览器 - chrome

【第一次打开各种平台】
浏览器
手机
微信小程序开发


+--------------------------------------------------------------------------------------------------------------------------
|第3课：
+--------------------------------------------------------------------------------------------------------------------------
【目录结构】
pages
static - 静态资源：图片，视频，图标
unpackage - 打包输出的文件
app.vue - 项目的根组件
mian.js - 项目的入口文件
manifest.json - 配置文件
pages.json - 页面配置
uni.css - uniapp的css

【开发规范】
页面文件： vue文件 template，script，style。
组件规范靠近小程序： div换view。
接口能力： 从wx方法变为uni方法。
数据绑定及时间处理同vue.js规范；同时补充app及页面的生命周期。
为兼容多端布局，建议使用flex布局。

总结，就是vue和小程序的混合。


+--------------------------------------------------------------------------------------------------------------------------
|第4课：
+--------------------------------------------------------------------------------------------------------------------------
【全局配置】
pages.json - globalStyle

【页面的style优先级高于全局globalStyle】
例如：
backgroundColor: 窗口背景色，要下来才能看到
backgroundTextStyle： 下来时，loading的颜色
 

+--------------------------------------------------------------------------------------------------------------------------
|第5课：页面配置
+--------------------------------------------------------------------------------------------------------------------------
【创建页面】
pages文件夹 -> message文件夹 -> message.vue
【路由】
pages.json -> pages属性

【h5】
h5：{
	"pullToRresh": {
		"color": "#f00",
	}
}


+--------------------------------------------------------------------------------------------------------------------------
|第6课：
+--------------------------------------------------------------------------------------------------------------------------
【tabbar】
【list属性】：最少2个，最多5个
"tabbar": {
	"list": [
		{
			"text": "",
			"pagepath": "",
			"iconpath": "",
			"selectedIconPath": "",	
		},
		{
			"text": "",
			"pagepath": "",
			"iconpath": "",
			"selectedIconPath": "",	
		},
		{
			"text": "",
			"pagepath": "",
			"iconpath": "",
			"selectedIconPath": "",	
		},
		{
			"text": "",
			"pagepath": "",
			"iconpath": "",
			"selectedIconPath": "",	
		},
	],	
}


+--------------------------------------------------------------------------------------------------------------------------
|第7课：
+--------------------------------------------------------------------------------------------------------------------------
【tabbar其他属性】
"tabbar": {
	"list": [
		{
			"text": "",
			"pagepath": "",
			"iconpath": "",
			"selectedIconPath": "",	
		},
	],	
	"color": "",// 【未选中】
	"selectedColor": "", 【被选中】
	"backgroundColor": "",
	"borderColor": "",// 【上边框颜色】
	"position": "top",// 【只有top和bottom，top仅支持小程序，在浏览器中没有效果】
}


+--------------------------------------------------------------------------------------------------------------------------
|第8课：
+--------------------------------------------------------------------------------------------------------------------------
【condition】：浏览器中，可以通过在地址栏输入路由地址，找到非首页的页面，但是微信小程序不行，所以在condition里面配置，从而在微信
小程序开发软件中，可以直接选择页面
"condition": {
	"current": 0,
	"list": [
		{
			"name": "详情页",
			"path": "",
			"query": "id=80"
		}
	]
}


+--------------------------------------------------------------------------------------------------------------------------
|第9课：组件
+--------------------------------------------------------------------------------------------------------------------------
【<text>】
inline-block
selectable: 是否可选，默认不可选
space: ensp, emsp, nbsp
decode: &nbsp 是否需要被解码


+--------------------------------------------------------------------------------------------------------------------------
|第10课：组件
+--------------------------------------------------------------------------------------------------------------------------
【<view>】
hover-class: 按下去后的样式
hover-stop-propagation: 阻止冒泡
hover-start-time:
hover-stay-time:


+--------------------------------------------------------------------------------------------------------------------------
|第11课：
+--------------------------------------------------------------------------------------------------------------------------
【<button>】
size: mini
type: primary, warn, default
plain: 镂空
disabled: 
loading:
form-type: submit, reset
hover-class:
hover-start-time:
hover-stay-time:


+--------------------------------------------------------------------------------------------------------------------------
|第12课：
+--------------------------------------------------------------------------------------------------------------------------
【image】
src:
默认宽高 300 * 225
mode: 裁剪缩放方式


+--------------------------------------------------------------------------------------------------------------------------
|第13课：
+--------------------------------------------------------------------------------------------------------------------------
【uniapp中的样式】
rpx: 750px 就是iphone6 的宽度，也就是350px

【@import】

【id，class，element， 但是不能用*】

【page等于body】

【全局样式和局部样式】
app.vue中为全局
组件中为局部

【字体和图标】
和web一样
字体文件小于40kb，会自动转化为base64格式
字体文件大于40kb，需要自己转换，否则不能使用
使用路径~@...

【scss，sass】
需要安装插件


+--------------------------------------------------------------------------------------------------------------------------
|第14课：
+--------------------------------------------------------------------------------------------------------------------------
【数据绑定】
{{msg}}

+--------------------------------------------------------------------------------------------------------------------------
|第15课：
+--------------------------------------------------------------------------------------------------------------------------
【v-bind】
:src="url"

【v-for】

+--------------------------------------------------------------------------------------------------------------------------
|第16课：
+--------------------------------------------------------------------------------------------------------------------------
【v-on】
不传参数，默认获取e
传参，$event

+--------------------------------------------------------------------------------------------------------------------------
|第17课：
+--------------------------------------------------------------------------------------------------------------------------
【生命周期】
包括vue的生命周期和页面声明周期

【vue生命周期】
App.vue
onlaunch: 初始化完成（全局只触发一次）
onshow: 从后台进入前台就触发
onHide: 从前台进入后台就触发（浏览器最小化就触发）
onError: 报错时触发（写个没有定义的变量就触发）

【页面生命周期】
onload: 
	【option】: 上一个页面传递过来的参数。
onshow: 页面显示
	【tabbar的页面， 显示一次后，就会保存在内存中，所以只触发onShow, 不会触发onLoad】
onReady: 页面渲染完成
onHide: 
onUnload:


+--------------------------------------------------------------------------------------------------------------------------
|第18课：
+--------------------------------------------------------------------------------------------------------------------------
【其他页面声明周期函数】
onPullDownRefresh: 下拉刷新
"pages": [
	{
		"path": "",
		"style": {
			"enablePullDownRefresh": 【true,】
		}
	}
]

【uni.stopPullDownRefresh()】
关闭下来刷新

【uni.startPullDownRefresh(Object)】


+--------------------------------------------------------------------------------------------------------------------------
|第19课：
+--------------------------------------------------------------------------------------------------------------------------
【onReachBottom】: 上拉加载

【onReachBottomDistance】
pages.json 修改触底的距离：


+--------------------------------------------------------------------------------------------------------------------------
|第20课：
+--------------------------------------------------------------------------------------------------------------------------
【网络请求】
uni.request({
	url: "",
	succes (res) {
		console.log(res)
	},
	fail: () {
	
	}
})


+--------------------------------------------------------------------------------------------------------------------------
|第21课：
+--------------------------------------------------------------------------------------------------------------------------
【数据缓存】
【uni.setStorage】:异步
uni.setStorage({
	key: "id",
	data: 8001,
	success () {
		
	}
})

uni.getStorage({
	key: "id",
	success (res) {
		console.log(res)
	}
})

uni.removeStorage({
	key: "id",
	success () {
		console.log()
	}
})


【uni.setStorageSync】同步
uni.setStorageSync("id", 8001);

uni.getStorageSync("id");

uni.removeStorageSync("id");

【清除】
uni.clearStorage()
uni.clearStorageSync()


+--------------------------------------------------------------------------------------------------------------------------
|第22课：
+--------------------------------------------------------------------------------------------------------------------------
【上传图片】
uni.chooseImage({
	count: 9,
	success (res) {
		console.log(res);
			// errMsg
			// tempFilePaths
			// tempFiles
	},
})

// 图片预览
previewImage (current) {
	console.log(current);
	
	uni.previewImage({
		current: current,
		url: this.imgArr,
		// 可选
		loop: true, // 只在app上有作用
		indicator: default, // number, none // 只在app上有作用
		
	})
}


+--------------------------------------------------------------------------------------------------------------------------
|第23课：
+--------------------------------------------------------------------------------------------------------------------------
【条件注释实现跨端兼容】
【html】
<!-- #ifdef H5 -->
<view>我只希望在h5页面看到</view>
<!-- #endif -->

<!-- #ifdef MP-WEIXIN -->
<view>我只希望在微信小程序中看到</view>
<!-- #endif -->

【js】
onload () {
	// ifdef H5
	consolee.log('仅h5会被打印')
	// endif
	
	// ifdef MP-WEIXIN
	consolee.log('仅微信小程序会被打印')
	// endif
}

【style】
/* ifdef H5 */
view {
	color: red;
}
/* endif MP-WEIXIN */

/* ifdef MP-WEIXIN */
view {
	color: red;
}
/* endif MP-WEIXIN */

+--------------------------------------------------------------------------------------------------------------------------
|第24课：
+--------------------------------------------------------------------------------------------------------------------------
【导航跳转】

【声明式导航】
跳转到非tabbar页面
<navigator url="pages/detail/detail">跳转到详情页<navigator>

跳转到tabbar页面
<navigator url="pages/detail/detail" open-type="switchTab">跳转到详情页<navigator>

销毁当前页面，没有返回键，触发onUnload时间
<navigator url="pages/detail/detail" open-type="redirect">跳转到详情页<navigator>


【编程式导航】
// 不关闭当前页面，跳转到非tabbar页面
goDetail () {
	uni.navigateTo({
		url: "pages/detail/detail"
	})
}

// 跳转到非tabbar页面，并关闭当前tabbar页面，触发onUnload事件
goDetail () {
	uni.redirectTo({
		url: "pages/detail/detail"
	})
}

// 跳转到tabbar页面，并关闭所有非tabbar页面，触发onUnload事件
goDetail () {
	uni.switchTab({
		url: "pages/detail/detail"
	})
}

【传参】
<navigator url="pages/detail/detail?id=123&name=cohen">跳转到详情页<navigator>

goDetail () {
	uni.navigateTo({
		url: "pages/detail/detail?id=123&name=cohen"
	})
}

接收页面
onload (option) {
	console.log(option);// {id: 123, name: 'cohen}
}


+--------------------------------------------------------------------------------------------------------------------------
|第25课：
+--------------------------------------------------------------------------------------------------------------------------
【自定义组件】

【引入组件】
import 

【注册】
component: {
	myComponent
}

【组件的生命周期函数】
beforeCreate: 实例化之前，这时候还拿不到自身数据, 如：this.num
created: 实例创建完成调用

beforeMount: 挂载之前调用，这时候还拿不到dom，如：document.getElementById('box');
mounted: 挂载之后调用

beforeUpdate: 数据更新之前
updated: 数据更新之后

beforeDestory: 销毁之前
destoryed: 销毁之后


+--------------------------------------------------------------------------------------------------------------------------
|第26课：
+--------------------------------------------------------------------------------------------------------------------------
【组件的通讯方式】

【父组件向子组件传值】
父组件：
<test :msg="msg"></test>

子组件：
prop: {
	msg: {
		type: string,
		default: '',
	}
}

【子组件向父组件传值】
子组件：
click () {
	this.$emit('myEvent', this.num);
}

父组件：
<test :msg="msg" @myEvent="doSomething"></test>

【兄弟组件通讯】
a.vue
<button @click="addNum">点击</button>

addNum () {
	uni.emit('updateNum', 10);
}

b.vue
created () {
	uni.$on('updateNum', num => {
		this.num += num;
	})
}


+--------------------------------------------------------------------------------------------------------------------------
|第27课：
+--------------------------------------------------------------------------------------------------------------------------
【扩展组件】






















