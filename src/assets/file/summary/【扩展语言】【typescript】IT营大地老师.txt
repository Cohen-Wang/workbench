主讲老师：大地
地址：https://i.youku.com/i/UNDgzOTY3MTAyNA==/videos?q=typescript
总课时：20课


+--------------------------------------------------------------------------------------------------------------------------
|第1课：介绍
+--------------------------------------------------------------------------------------------------------------------------
介绍：
	1.微软开发的开源的编程语言
	2.typescript > es6 > es5
	3.更像java，c#这样的面向对象语言
	4.google的Angular2.x+就是基于typescript语法
	5.最新的Vue，React也可以继承typescript

安装：
	npm install -g typescript
	
编译命令：
	tsc helloworld.ts
	
【生成配置文件】：
	tsc --init;// 会在文件夹内生成tsconfig.json
	tsc 监视tsconfig.json
	
【VSCode】安装typescript插件，安装后自动编译出js文件

【Hbuilder】安装typescript插件，安装后自动编译出js文件
	
	
+--------------------------------------------------------------------------------------------------------------------------
|第2课：数据类型
+--------------------------------------------------------------------------------------------------------------------------
所有数据类型：
	boolean
	number
	string
	array
	null
	undefined
	【tuple】元组类型
	【enum】
	【any】
	【void】
	【never】
	
【类型校验】：
	【boolean，number，string】
		let a: boolean = true;
		let a: number = 123;
		let a: string = '123';
		
	【数组类型】
		let arr: Array<number> = [1, 2, 3];
		let arr: number[] = [1, 2, 3];
		
	【元组类型】属于数组的一种，为数组中【每一个位置指定一个类型】
		let arr: [number, string] = [123, '123];
		
	【枚举类型】
		enum Flag {
			success = 1,
			error = 2,
		}
		let s: Flag = Flag.success;
		console.log(s);// echo 1
	

+--------------------------------------------------------------------------------------------------------------------------
|第3课: 数据类型 any， null ，undefined， 
+--------------------------------------------------------------------------------------------------------------------------
【类型校验】：
	【any】
		let num: any = 123;
		num = '123';// 不报错
		
		// 理论上应该是object类型，但是ts 没有object类型，所以要写any
		let oBox: 【any】 = document.getElementById('box');
		oBox.style.color = 'red';
	
	【null和undefined】是其他（never类型）的子类型
	【多用于联合类型】
		let num: number | undefined;// 【初始化的时候，不要赋值】
	
	【void】多用于函数返回值类型
	
	【never】：【意味着声明never的变量只能被never类型所赋值】
		let a: null = null;
		let a: undefined = undefined;
		
		let a: never;【一般还是用any，而不是never】
		a = (function () {
			
			throw new Error("错误");// 这里就是never类型
		} ())
	

+--------------------------------------------------------------------------------------------------------------------------
|第4课：函数
+--------------------------------------------------------------------------------------------------------------------------
【函数声明】 - 【一定要填写返回值】
	函数声明式
	es5: function show () {};
	ts : function show ()【: void】 {};

	函数表达式
	es5: let show = function () {};
	ts : let show = function ()【: void】 {};

【函数传参】
	function show (【name: string】): void {
		
	}

【可选参数】： 最好放在后面
	function show (name【?:】 string): void {
		
	}

【默认参数】
	function show (name: string 【= 'cohen'】): void {
		
	} 

【剩余参数】
	function show (【...result】: number[]): number {
		let sum = 0;
		for (let i = 0; i < result.length; i++) {
			sum += result[i];
		}
		return sum;
	}

【函数重载】
	function show () {
		alert(1);
	}
	function show () {// 在es5里面， 第二个回覆盖前一个
		alert(2);
	}

	// ts不重载，以下两个都有效
	function show (a: string): string {}
	function show (a: number): number {}

【箭头函数】
	setInterval( () => {
		alert('123');
	}, 1000);


+--------------------------------------------------------------------------------------------------------------------------
|第5课：es5类
+--------------------------------------------------------------------------------------------------------------------------
【es5的类】
	function Person (name, age) {
		this.name = name;
		this.age = age;
	}
	// 原型
	Person.prototype.showName () {
		return this.name;
	}
	// 静态方法
	Person.getInfo = function () {
		console.log('这个方法里面没有实力属性，即没有this');
	}


	// 继承： 对象冒充，原型链
	function Child () {
		Person.call(this, name, age);// 【可以继承父类，构造函数里面的【属性和方法】 】
	}
	// 原型链继承
	Child.prototype = new Person();// 【❤❤❤❤继承了构造函数 和 原型方法】
	child.prototype = Person.prototype;


+--------------------------------------------------------------------------------------------------------------------------
| 第6课：ts类
+--------------------------------------------------------------------------------------------------------------------------
【声明】
	【class】 Person {
		【public name: string;】
		
		【constructor】 (name) {
			this.name = name;
		}
		
		showName ()【: string】 {
			return this.name;
		}
	}

【继承】
	class Child 【extends】 person {
		
		constructor (name: string) {
			【super(name);】
		}
	}

【修饰符】
	public

	private：【不希望外部修改】
	 
	protected


+--------------------------------------------------------------------------------------------------------------------------
|第7课：静态方法；多态；抽象类
+--------------------------------------------------------------------------------------------------------------------------
【静态方法】
	【static】 
		如：jquery ： $.ajax(); 
		不能有实例属性和实例方法
	
【多态】：父类定义方法，但不去实现，让子类实现，每个子类有不同的实现方法
	class Animal {}
	class Dog extends Animal {}
	class Cat extends Animal {}

【抽象类】
	1.抽象类必须要有抽象方法
	2.子类必须重写抽象法法

	【abstract】 class Animal {
		【abstract】 eat () {
			// ...
		}
	}
	class Dog extends Animal {}
	class Cat extends Animal {}

+--------------------------------------------------------------------------------------------------------------------------
|第8课：接口
+--------------------------------------------------------------------------------------------------------------------------
【定义】
	对属性，函数，可索引，类的规范。

【对象的约束】
	function printLabel (labelInfo: {label: string}): void {// 【传入的参数必须是有label字段的对象】
		console.log(label);
	}
	printLabel('123');// error
	printLabel(123);// error
	printLabel({label: '123});// '123'

【接口约束】
	【interface FullName】 {
		firstName: string,
		secondName: string,
	}
	function showName (name: 【FullName】) {
		return name.firstName + name.secondName;
	}

【接口可选属性】
	interface FullName {
		firstName: string,
		secondName: string,
		age【?:】 number,
	}


+--------------------------------------------------------------------------------------------------------------------------
|第9课：函数参数规范接口的案例
+--------------------------------------------------------------------------------------------------------------------------
【函数参数规范接口】
	interface Config {
		type: string;
		url: string;
		data?: string;
		dataType: string;
	}
	function ajax(config: 【Config】) {
		// ... 
	}


+--------------------------------------------------------------------------------------------------------------------------
|第10课：函数类型规范接口的案例
+--------------------------------------------------------------------------------------------------------------------------
【函数类型规范接口】
	interface encrypt {
		(key: string, value: string): string;
	}
	function md5【: encrypt】 = function (key: string, value: string): string {
		// ...
	}


+--------------------------------------------------------------------------------------------------------------------------
|第11课：可索引接口；类类型接口
+--------------------------------------------------------------------------------------------------------------------------
【可索引接口】数组
	interface UserArr {
		[index: number]: string;
	}
	let arr: UserArr = ['aaa', 'bbb'];
	console.log(arr[0]);// 'aaa'

【可索引接口】对象
	interface UserObj {
		[index: string]: string;
	}
	let obj: UserObj = {name: '张三'};

【类类型接口】
	对类的约束，和抽象类有点相似
	interface Animal {
		name: string;
		eat (str: string): void;
	}
	class Dog implements Animal {
		name: string
		constructor (name: string) {
			this.name = name;
		}
	}
	eat () {
		console.log();
	}


+--------------------------------------------------------------------------------------------------------------------------
|第12课：接口的继承
+--------------------------------------------------------------------------------------------------------------------------
【接口的继承】 - interface A extends B
	interface Animal {
		eat (): void;
	}
	interface Person 【extends】 Animal {
		work (): void;
	}
	class Web implements Person {
		name: string;
		constructor (name: string) {
			this.name = name;
		}
		【eat】 () {
			// ...
		}
		【work】 () {
			// ...
		}
	}


+--------------------------------------------------------------------------------------------------------------------------
|第13课：泛型函数，泛型类
+--------------------------------------------------------------------------------------------------------------------------
【泛型】
	函数传入什么类型的参数，就返回什么类型的参数

【泛型函数】
	function getData【<T>】 (value: 【T】): 【T】 {
		return value;
	}

【调用】
	getData【<number>】(123);// 调用的时候，再规定类型

【T可以用任意字母】
	function getData【<A>】 (value: 【A】): 【A】 {
		return value;
	}

【数组】
	function getData<T> (value: T): 【Array<T>】 {
		return value;
	}

【传入泛型，返回任意类型】
	function getData<T> (value: T): 【any】 {
		return value;
	}

【泛型类】
	没学懂
	用不好就用any


+--------------------------------------------------------------------------------------------------------------------------
|第14课：泛型接口
+--------------------------------------------------------------------------------------------------------------------------
【泛型接口】
	interface ConfigFn {
		【<T>(value: T): T;】
	}
	// 实现
	let getData【: ConfigFn】 = function<T> (value: T): T {
		return value;
	}
	// 调用
	getData<string>('张三');


+--------------------------------------------------------------------------------------------------------------------------
|第15课：泛型类 把类作为参数类型的泛型类
+--------------------------------------------------------------------------------------------------------------------------


+--------------------------------------------------------------------------------------------------------------------------
|第16课：
+--------------------------------------------------------------------------------------------------------------------------

+--------------------------------------------------------------------------------------------------------------------------
|第17课：
+--------------------------------------------------------------------------------------------------------------------------


+--------------------------------------------------------------------------------------------------------------------------
|第18课：命名空间
+--------------------------------------------------------------------------------------------------------------------------
【声明】
	namespace A {
		// ...
	}

【暴露】
	export
	
【命名空间模块化】	
	import {A, B} from './modules/Animal';
	
【老版本】
	3.4版本之前，可以用  ///<reference path='Animal'/>
	
	
+--------------------------------------------------------------------------------------------------------------------------
|第19课：装饰器
+--------------------------------------------------------------------------------------------------------------------------
【普通装饰器】
	function logClass (params: any) {
		console.log(params);// 【params 指向当前类】
		
		// 添加属性
		params.prototype.url = '添加的属性'';
		
		// 添加方法
		params.prototype.run = function () {
			console.log('添加的方法');
		}
	}
	
	【@logClass】
	class HTTPClass {
		constructor () {
			// ...
		}
		getData () {
			// ...
		}
	}
	
【带参数装饰器】
	function logClass (params: any) {
		【return function】 (target: any) {
			console.log(target);// 参数
			console.log(params);// 类
		}
	}
	
	@logClass【('hello')】
	class HTTPClass {
		constructor () {
			// ...
		}
		getData () {
			// ...
		}
	}

【属性装饰器】
	function logProperty (params: any) {
		【return function】 (target: any, attr: any) {
			console.log(params);// 类
			console.log(target);// 参数
			console.log(attr);// 属性
		}
	}
	
	class HTTPClass {
		【@logProperty('http://www.baidu.com')】
		public url: any | undefined;
		constructor () {
			// ...
		}
		getData () {
			// ...
		}
	}
	
	
+--------------------------------------------------------------------------------------------------------------------------
|第20课：装饰器
+--------------------------------------------------------------------------------------------------------------------------













